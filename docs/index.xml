<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lithium Theme</title>
    <link>/index.xml</link>
    <description>Recent content on Lithium Theme</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 14 Mar 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Tidy Data (tidy, purrr)</title>
      <link>/2017/03/14/tidy-data-tidy-purrr/</link>
      <pubDate>Tue, 14 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/03/14/tidy-data-tidy-purrr/</guid>
      <description>&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#dplyr&#34;&gt;dplyr&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#spread&#34;&gt;spread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gather&#34;&gt;gather&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#separate-and-unite&#34;&gt;separate and unite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#iris-dataset&#34;&gt;iris dataset&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#purr&#34;&gt;purr&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#apply-a-function-to-each-element-of-a-vector&#34;&gt;apply a function to each element of a vector&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;We have learned basic data manipulation with &lt;code&gt;dplyr&lt;/code&gt;. Now it is time to learn reshaping of tabular data with &lt;code&gt;tidyr&lt;/code&gt; and looping through elements with &lt;code&gt;purrr&lt;/code&gt;&lt;/p&gt;
&lt;div id=&#34;dplyr&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;dplyr&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;spread&lt;/code&gt; - move values into column names&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gather&lt;/code&gt; - move column names into values&lt;/li&gt;
&lt;li&gt;&lt;code&gt;separate&lt;/code&gt; - separate variables that share a column&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unite&lt;/code&gt; - unite a variable that is split across several columns&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;spread&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;spread&lt;/h3&gt;
&lt;p&gt;Imagine you want to calculate a ratio of number of males to females in &lt;code&gt;babynames&lt;/code&gt; dataset. You can start as&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;babynames %&amp;gt;%
  group_by(year, sex) %&amp;gt;%
  summarise(n = sum(n))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then you need something that from &lt;code&gt;n&lt;/code&gt; generates two columns &lt;code&gt;males&lt;/code&gt; and &lt;code&gt;females&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;babynames %&amp;gt;%
  group_by(year, sex) %&amp;gt;%
  summarise(n = sum(n)) %&amp;gt;%
  spread(sex, n) %&amp;gt;%
  head()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Source: local data frame [6 x 3]
## Groups: year [6]
## 
##    year      F      M
##   &amp;lt;dbl&amp;gt;  &amp;lt;int&amp;gt;  &amp;lt;int&amp;gt;
## 1  1880  90993 110491
## 2  1881  91954 100745
## 3  1882 107850 113688
## 4  1883 112321 104629
## 5  1884 129022 114445
## 6  1885 133055 107800&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;challenge-1&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Challenge 1:&lt;/h4&gt;
&lt;p&gt;Modify the code above to plot the percent of childern that are male in &lt;code&gt;babynames&lt;/code&gt; dataset:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./post/2017-03-14-tidy-data-tidy-purrr_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;gather&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;gather&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;gather&lt;/code&gt; is inverse function to &lt;code&gt;spread&lt;/code&gt;, its collapses multiple columns into two columns, see &lt;code&gt;?gather&lt;/code&gt;.&lt;/p&gt;
&lt;div id=&#34;challenge-2&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Challenge 2:&lt;/h4&gt;
&lt;p&gt;For the wide transformation of &lt;code&gt;babynames&lt;/code&gt;, use &lt;code&gt;gather&lt;/code&gt; to transform the dataset back into the long format with three columns.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;wide &amp;lt;- babynames %&amp;gt;%
  group_by(year, sex) %&amp;gt;%
  summarise(n = sum(n)) %&amp;gt;%
  spread(sex, n)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;separate-and-unite&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;separate and unite&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;separate&lt;/code&gt; splits a column by dividing values at a specific character. &lt;code&gt;unite&lt;/code&gt; unites columns into single column by combining cells.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;iris-dataset&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;iris dataset&lt;/h3&gt;
&lt;p&gt;Famous Fisher’s dataset with measurements of sepal / petal length and width for &lt;em&gt;Iris setosa, versicolor&lt;/em&gt;, and &lt;em&gt;virginica&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Let us start with some data inspection. What is the distribution of &lt;code&gt;Sepal.Length&lt;/code&gt; for each specie?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(iris, aes(x = Species, y = Sepal.Length)) + 
  geom_boxplot() +
  geom_jitter(width=0.2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/2017-03-14-tidy-data-tidy-purrr_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Instead of boxplots and data points, we can plot violins and means.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;stats &amp;lt;- iris %&amp;gt;%
  group_by(Species) %&amp;gt;%
  summarize(average = mean(Sepal.Length),
            se = sd(Sepal.Length) / sqrt(n())) %&amp;gt;%
  ungroup()

ggplot(iris, aes(x = Species, y = Sepal.Length)) + 
  geom_violin() +
  geom_pointrange(data= stats, aes(x = Species, y = average, 
                                    ymin = average-se, ymax = average+se), size=0.5)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/2017-03-14-tidy-data-tidy-purrr_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Or if somebody insist - barplots and error bars.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(stats, aes(x = Species, y = average, fill = Species)) + 
  geom_bar(stat=&amp;quot;identity&amp;quot;) +
  geom_errorbar(data= stats, aes(ymin = average-se, ymax = average+se), width=0.5) +
  ylab(&amp;quot;Sepal.Length&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/2017-03-14-tidy-data-tidy-purrr_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;challenge-3&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Challenge 3&lt;/h4&gt;
&lt;p&gt;Now try to visualise not only &lt;code&gt;Sepal.Length&lt;/code&gt; but also the remaining three variables into the one graph.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;purr&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;purr&lt;/h2&gt;
&lt;div id=&#34;apply-a-function-to-each-element-of-a-vector&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;apply a function to each element of a vector&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;map(.x, .f, ...)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;map_lgl(.x, .f, ...)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;map_chr(.x, .f, ...)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;map_int(.x, .f, ...)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;map_dbl(.x, .f, ...)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;map_df(.x, .f, ..., .id = NULL)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;walk(.x, .f, ...)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Data Manipulation (dplyr)</title>
      <link>/2017/03/13/data-manipulation-dplyr/</link>
      <pubDate>Mon, 13 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/03/13/data-manipulation-dplyr/</guid>
      <description>&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#dataset-babynames&#34;&gt;Dataset babynames&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#single-table-verbs&#34;&gt;Single table verbs&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#filter&#34;&gt;filter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#arrange&#34;&gt;arrange&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#select&#34;&gt;select&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mutate&#34;&gt;mutate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#summarise&#34;&gt;summarise&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#operator&#34;&gt;Operator %&amp;gt;%&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#grouping-cases&#34;&gt;Grouping cases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#joining-datasets&#34;&gt;Joining datasets&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#two-table-verbs&#34;&gt;Two table verbs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dataset-nycflights13&#34;&gt;Dataset nycflights13&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#summary&#34;&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;Python programmers believe that there should be one – and preferably only one – obvious way to do things. In R we love chaos and embrace originality. Therefore, we often have many ways to try.&lt;/p&gt;
&lt;p&gt;For data manipulation, we have a solid set of tools in base R like &lt;code&gt;subset&lt;/code&gt;, &lt;code&gt;duplicated&lt;/code&gt;, &lt;code&gt;cbind&lt;/code&gt;, &lt;code&gt;rbind&lt;/code&gt;, &lt;code&gt;match&lt;/code&gt; and four ways to use &lt;code&gt;[&lt;/code&gt; operator (numeric index, negative numeric index, logical index, and character index). For example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;var = c(a = 1, b = 2, c = 3, d = 4)
var[1:2]
var[-(3:4)]
var[c(TRUE,TRUE,FALSE,FALSE)]
var[c(&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;)]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here I will talk about package &lt;code&gt;dplyr&lt;/code&gt; that can be installed as &lt;code&gt;install.packages(dplyr)&lt;/code&gt; and loaded as &lt;code&gt;library(dplyr)&lt;/code&gt;. The package gains popularity due to its speed and readable code (&lt;code&gt;%&amp;gt;%&lt;/code&gt; operator).&lt;/p&gt;
&lt;div id=&#34;dataset-babynames&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Dataset babynames&lt;/h2&gt;
&lt;p&gt;Install and load package &lt;code&gt;babynames&lt;/code&gt; with names of male and female babies in US Social Security Administration (from 1880 to 2014).&lt;/p&gt;
&lt;p&gt;Get the info about the dataset with &lt;code&gt;?babynames&lt;/code&gt; and &lt;code&gt;View(babynames)&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;single-table-verbs&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Single table verbs&lt;/h2&gt;
&lt;p&gt;The are six single table verbs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;filter()&lt;/code&gt; - extract cases&lt;/li&gt;
&lt;li&gt;&lt;code&gt;arrange()&lt;/code&gt; - reorder cases&lt;/li&gt;
&lt;li&gt;&lt;code&gt;group_by()&lt;/code&gt; - group cases&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select()&lt;/code&gt; - extract variables&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mutate()&lt;/code&gt; - create new variables&lt;/li&gt;
&lt;li&gt;&lt;code&gt;summarise()&lt;/code&gt; - summarise variables / create cases&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Download &lt;a href=&#34;https://www.rstudio.com/resources/cheatsheets/&#34;&gt;Data Transformation Cheat Sheet&lt;/a&gt; to see other &lt;code&gt;dplyr&lt;/code&gt; data transformations.&lt;/p&gt;
&lt;div id=&#34;filter&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;filter&lt;/h3&gt;
&lt;p&gt;Extract rows that meet logical criteria, see &lt;code&gt;?filter&lt;/code&gt; for help. Also, see &lt;code&gt;?Comparison&lt;/code&gt; and &lt;code&gt;?base::Logic&lt;/code&gt; for logical operators in R.&lt;/p&gt;
&lt;div id=&#34;challenge-1&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Challenge 1&lt;/h4&gt;
&lt;p&gt;Try to plot a proportion of the name “Wendy” in US population.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./post/2017-03-13-data-manipulation-dplyr_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;arrange&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;arrange&lt;/h3&gt;
&lt;p&gt;Order rows from smallest to largest values. See &lt;code&gt;?arrange&lt;/code&gt; for help.&lt;/p&gt;
&lt;div id=&#34;challenge-2&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Challenge 2&lt;/h4&gt;
&lt;p&gt;What was the most popular name in a single year? In what year was Wendy the most popular?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;select&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;select&lt;/h3&gt;
&lt;p&gt;Extract columns by name. See &lt;code&gt;?select&lt;/code&gt; and &lt;em&gt;Select Helpers&lt;/em&gt; in the cheat sheet.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;mutate&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;mutate&lt;/h3&gt;
&lt;p&gt;Create new columns, see &lt;code&gt;?mutate&lt;/code&gt;.&lt;/p&gt;
&lt;div id=&#34;challenge-3&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Challenge 3&lt;/h4&gt;
&lt;p&gt;Create a new table &lt;code&gt;babynames2&lt;/code&gt; with a new percent column &lt;code&gt;perc = 100*prop&lt;/code&gt;, then drop the column &lt;code&gt;prop&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1,825,433 × 5
##     year   sex      name     n     perc
##    &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;dbl&amp;gt;
## 1   1880     F      Mary  7065 7.238359
## 2   1880     F      Anna  2604 2.667896
## 3   1880     F      Emma  2003 2.052149
## 4   1880     F Elizabeth  1939 1.986579
## 5   1880     F    Minnie  1746 1.788843
## 6   1880     F  Margaret  1578 1.616720
## 7   1880     F       Ida  1472 1.508119
## 8   1880     F     Alice  1414 1.448696
## 9   1880     F    Bertha  1320 1.352390
## 10  1880     F     Sarah  1288 1.319605
## # ... with 1,825,423 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;summarise&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;summarise&lt;/h3&gt;
&lt;p&gt;Compute table of summaries.&lt;/p&gt;
&lt;div id=&#34;challenge-4&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Challenge 4&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Create a summary that displays the min, mean, and max &lt;code&gt;prop&lt;/code&gt; for Wendy.&lt;/li&gt;
&lt;li&gt;Determine how many unique names appear in the data set. (see cheat sheet or help for &lt;code&gt;n_distinct&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;How many times a single names was given to &lt;span class=&#34;math inline&#34;&gt;\(1\%\)&lt;/span&gt; or more of the boys or girls?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;operator&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Operator %&amp;gt;%&lt;/h2&gt;
&lt;p&gt;A little bunny hopped though the forest, scooped up the field mouse and bopped on his head. It could be expressed as follows.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;foo_foo &amp;lt;- little_bunny()
foo_foo2 &amp;lt;- hop_through(foo_foo, forest)
foo_foo3 &amp;lt;- scoop_up(foo_foo2, field_mouse)
bop_on(foo_foo3, head)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or the equivalently as…&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bop_on(
  scoop_up(
    hop_through(little_bunny(), forest),
    field_mouse
  ),
head)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ugly, is not it?&lt;/p&gt;
&lt;p&gt;The operator &lt;code&gt;%&amp;gt;%&lt;/code&gt; enables us to sequentially describe the procedure without creating extra variables.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;little_bunny() %&amp;gt;%
  hop_through(forest) %&amp;gt;%
  scoop_up(field_mouse) %&amp;gt;%
  bop_on(head)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;grouping-cases&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Grouping cases&lt;/h2&gt;
&lt;p&gt;Groups cases by common values.&lt;/p&gt;
&lt;p&gt;Are there more boys in the data set or girls?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;babynames %&amp;gt;%
  group_by(sex) %&amp;gt;%
  summarise(total = sum(n))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 × 2
##     sex     total
##   &amp;lt;chr&amp;gt;     &amp;lt;int&amp;gt;
## 1     F 167070477
## 2     M 170064949&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;How does boys vs. girls ratio changes over time?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;babynames %&amp;gt;%
  group_by(year, sex) %&amp;gt;%
  summarise(total = sum(n)) %&amp;gt;%
  ggplot(aes(x = year, y = total, color = sex)) +
geom_line()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/2017-03-13-data-manipulation-dplyr_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;challenge-5&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Challenge 5:&lt;/h4&gt;
&lt;p&gt;Plot the number of unique names by year over time. Does it change? (Note in English, the same name could be given to a boy and a girl at the same year)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./post/2017-03-13-data-manipulation-dplyr_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;joining-datasets&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Joining datasets&lt;/h2&gt;
&lt;div id=&#34;two-table-verbs&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Two table verbs&lt;/h3&gt;
&lt;p&gt;There are multiple ways to join tables &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For example, imagine you want to join a table of &lt;code&gt;airports&lt;/code&gt; to a table of &lt;code&gt;flights&lt;/code&gt;. What should happen to airports with no flight? And what should happen to flights from airports not included in &lt;code&gt;airports&lt;/code&gt; table?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;inner_join&lt;/code&gt;: return all rows from &lt;code&gt;x&lt;/code&gt; where there are matching values in &lt;code&gt;y&lt;/code&gt;, and all columns from &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;. If there are multiple matches between &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, all combination of the matches are returned.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;left_join&lt;/code&gt;: same as &lt;code&gt;inner_join&lt;/code&gt; but also keeps rows in &lt;code&gt;x&lt;/code&gt; with no match in &lt;code&gt;y&lt;/code&gt; (add &lt;code&gt;NA&lt;/code&gt; values)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;right_join&lt;/code&gt;: same as &lt;code&gt;inner_join&lt;/code&gt; but also keeps rows in &lt;code&gt;y&lt;/code&gt; with no match in &lt;code&gt;x&lt;/code&gt; (add &lt;code&gt;NA&lt;/code&gt; values)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;full_join&lt;/code&gt;: return all rows and all columns from both x and y. Where there are not matching values, returns NA for the one missing.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;dataset-nycflights13&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Dataset nycflights13&lt;/h3&gt;
&lt;p&gt;Data about every flight that departed La Guardia, JFK, or Newark airports in 2013.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# install.packages(&amp;quot;nycflights13&amp;quot;)
library(nycflights13)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Look at &lt;code&gt;?flights&lt;/code&gt; and &lt;code&gt;?airlines&lt;/code&gt; tables.&lt;/p&gt;
&lt;div id=&#34;challenge-6&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Challenge 6:&lt;/h4&gt;
&lt;p&gt;Which airlines had the largest arrival delays? Try to complete the template below.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;flights %&amp;gt;%
  filter(!is.na(arr_delay)) %&amp;gt;%
  ... join airlines to flights ... %&amp;gt;%
  group_by( ...  ) %&amp;gt;% 
  ... compute the average delay ... %&amp;gt;%
  arrange( ...order by delay...  )&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;flights %&amp;gt;%
  filter(!is.na(arr_delay)) %&amp;gt;%
  left_join(airlines, by = &amp;quot;carrier&amp;quot;) %&amp;gt;%
  group_by(name) %&amp;gt;%
  summarise(delay = mean(arr_delay)) %&amp;gt;%
  arrange(-delay)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 16 × 2
##                           name      delay
##                          &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt;
## 1       Frontier Airlines Inc. 21.9207048
## 2  AirTran Airways Corporation 20.1159055
## 3     ExpressJet Airlines Inc. 15.7964311
## 4           Mesa Airlines Inc. 15.5569853
## 5        SkyWest Airlines Inc. 11.9310345
## 6                    Envoy Air 10.7747334
## 7       Southwest Airlines Co.  9.6491199
## 8              JetBlue Airways  9.4579733
## 9            Endeavor Air Inc.  7.3796692
## 10       United Air Lines Inc.  3.5580111
## 11             US Airways Inc.  2.1295951
## 12              Virgin America  1.7644644
## 13        Delta Air Lines Inc.  1.6443409
## 14      American Airlines Inc.  0.3642909
## 15      Hawaiian Airlines Inc. -6.9152047
## 16        Alaska Airlines Inc. -9.9308886&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;summary&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;dplyr&lt;/code&gt; is a library for data transformation and manipulation. It is part of a collection of packages called &lt;a href=&#34;http://www.tidyverse.org&#34;&gt;Tidyverse&lt;/a&gt;. It uses a modified version of data frames called &lt;a href=&#34;https://cran.r-project.org/web/packages/tibble/vignettes/tibble.html&#34;&gt;tibbles&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;sources&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Sources:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Data Transformation with dplyr (rstudio::conf, Tidyverse workshop)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Grammar of Graphics (ggplot2) [Part 2]</title>
      <link>/2017/03/07/ggplot2-part-2/</link>
      <pubDate>Tue, 07 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/03/07/ggplot2-part-2/</guid>
      <description>&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#ggplot2-recap&#34;&gt;ggplot2 recap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#labels&#34;&gt;labels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#themes&#34;&gt;themes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#scales&#34;&gt;scales&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#saving-graphs&#34;&gt;saving graphs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#summary&#34;&gt;summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;ggplot2-recap&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;ggplot2 recap&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Input data into &lt;code&gt;ggplot&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add visualization layers with &lt;code&gt;geom_&lt;/code&gt; functions&lt;/li&gt;
&lt;li&gt;Map &lt;em&gt;variables&lt;/em&gt; to aesthetics with &lt;code&gt;aes()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Plot summaries with &lt;code&gt;stat=&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Handle collisions with &lt;code&gt;position=&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Change coordinate systems with a &lt;code&gt;coord_&lt;/code&gt; function&lt;/li&gt;
&lt;li&gt;Facet the plot with a &lt;code&gt;facet_&lt;/code&gt; function&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;challenge-1&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Challenge 1:&lt;/h4&gt;
&lt;p&gt;Try to make the following plot (density plot of &lt;code&gt;price&lt;/code&gt; in dependence on &lt;code&gt;cut&lt;/code&gt;) and save it into variable &lt;code&gt;p1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./post/2017-03-07-ggplot2-part-2_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;labels&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;labels&lt;/h2&gt;
&lt;p&gt;A function to add labels to a plot is &lt;code&gt;labs&lt;/code&gt;. You can add a title, subtitle and caption as follow.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p1 + labs(title = &amp;quot;Poorly cut diamonds appear to fetch unexpectedly high prices&amp;quot;,
      subtitle = &amp;quot;The lowest cut rating is associated with the highest mode price&amp;quot;,
      caption = &amp;quot;Data by Hadley Wickham&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/2017-03-07-ggplot2-part-2_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Similarly, you can change axis labels and legend.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p1 + labs(x = &amp;quot;Price&amp;quot;, y = &amp;quot;Density&amp;quot;, color = &amp;quot;Cut Rating&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/2017-03-07-ggplot2-part-2_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;themes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;themes&lt;/h2&gt;
&lt;p&gt;Themes change appearance of non-data elements.&lt;/p&gt;
&lt;p&gt;First, you change theme manually using &lt;code&gt;theme&lt;/code&gt; function. See the list of what you can control in &lt;a href=&#34;http://docs.ggplot2.org/current/theme.html&#34;&gt;the documentation&lt;/a&gt;. For example, you can take the previous plot and remove the legend:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p1 + theme(legend.position = &amp;quot;none&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/2017-03-07-ggplot2-part-2_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Second, you can use predefined themes. Take the &lt;code&gt;p1&lt;/code&gt; plot and try to add the following themes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;p1 + theme_bw()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p1 + theme_classic()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p1 + theme_dark()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p1 + theme_light()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p1 + theme_linedraw()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p1 + theme_minimal()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p1 + theme_void()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Many developers come with their own ggplot2 themes. For example with &lt;code&gt;library(ggthemes)&lt;/code&gt; you can try &lt;code&gt;p1 + theme_wsj()&lt;/code&gt; to style your plot like Wall Street Journal, with &lt;code&gt;library(xkcd)&lt;/code&gt; you can style your plot as &lt;a href=&#34;https://xkcd.com/1798/&#34;&gt;xkcd comics&lt;/a&gt; and Bob Rudis creates his &lt;a href=&#34;https://github.com/hrbrmstr/hrbrthemes&#34;&gt;hrbrthemes&lt;/a&gt; for his style.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# devtools package can be installed as install.packages(&amp;quot;devtools&amp;quot;)
# hrbrthemes package can be then installed as devtools::install_github(&amp;quot;hrbrmstr/hrbrthemes&amp;quot;)
library(hrbrthemes)
p1 + theme_ipsum_rc()   # or theme_ipsum() on Windows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/2017-03-07-ggplot2-part-2_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;scales&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;scales&lt;/h2&gt;
&lt;p&gt;You can add a &lt;code&gt;scale_&lt;/code&gt; function for each aesthetics.&lt;/p&gt;
&lt;p&gt;Let us plot the dependence between price and weight (&lt;code&gt;carat&lt;/code&gt;):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;s &amp;lt;- ggplot(diamonds, aes(carat, price)) +
   geom_point(aes(color = cut))
s&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/2017-03-07-ggplot2-part-2_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;challenge-2&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Challenge 2:&lt;/h4&gt;
&lt;p&gt;Try to apply various scales to the graph &lt;code&gt;s&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;for color, try &lt;code&gt;scale_color_grey&lt;/code&gt; and &lt;code&gt;scale_color_brewer(palette = &amp;quot;Set1&amp;quot;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;for axis, try &lt;code&gt;scale_x_log10()&lt;/code&gt; and &lt;code&gt;scale_y_log10()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are also several packages with more exotic color scales:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ggsci&lt;/code&gt;: scientific journal color palettes &lt;a href=&#34;https://cran.r-project.org/web/packages/ggsci/vignettes/ggsci.html&#34;&gt;[link]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wesanderson&lt;/code&gt;: palletes inspired by Wes Anderson’s movies &lt;a href=&#34;https://github.com/karthik/wesanderson&#34;&gt;[link]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RSkittleBrewer&lt;/code&gt;: for those times you want to make plots with candy-themed color schemes &lt;a href=&#34;https://github.com/alyssafrazee/RSkittleBrewer&#34;&gt;[link]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;challenge-3&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Challenge 3:&lt;/h4&gt;
&lt;p&gt;If we now color previous graph by &lt;code&gt;price&lt;/code&gt; instead of &lt;code&gt;cut&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;s1 &amp;lt;- ggplot(diamonds, aes(carat, price)) +
   geom_point(aes(color = price))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Try to apply various continuous color scales.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;from &lt;code&gt;library(viridis)&lt;/code&gt;: &lt;code&gt;scale_color_viridis()&lt;/code&gt; and &lt;code&gt;scale_color_viridis(option = &amp;quot;A&amp;quot;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scale_color_distiller(palette = &amp;quot;Spectral&amp;quot;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scale_color_brewer(palette = &amp;quot;Purples&amp;quot;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;challenge-4&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Challenge 4:&lt;/h4&gt;
&lt;p&gt;Now experiment with labels, themes, and scales to make a clear graph how a price of diamond depends on its weight. Perhaps this one, or any other you like.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./post/2017-03-07-ggplot2-part-2_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;saving-graphs&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;saving graphs&lt;/h2&gt;
&lt;p&gt;There is more than one way to save the graph:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In RStudio you can use &lt;code&gt;Export&lt;/code&gt; tab in &lt;code&gt;Plots&lt;/code&gt; panel&lt;/li&gt;
&lt;li&gt;In &lt;code&gt;ggplot2&lt;/code&gt; package you can use a &lt;code&gt;ggsave&lt;/code&gt; function (see &lt;code&gt;?ggsave&lt;/code&gt; for help and examples)&lt;/li&gt;
&lt;li&gt;You can &lt;code&gt;pdf&lt;/code&gt;, &lt;code&gt;png&lt;/code&gt; and &lt;code&gt;dev.off&lt;/code&gt; as in base graphics&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;challenge-5&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Challenge 5:&lt;/h4&gt;
&lt;p&gt;Save the plot generated in Challenge 4 into PDF file.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;summary&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;summary&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ggplot2&lt;/code&gt; in a combination with custom themes are a fast route to creation of (almost) publication-quality graphics.&lt;/p&gt;
&lt;div id=&#34;sources&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Sources:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Data Visualization with ggplot2 (rstudio::conf, Tidyverse workshop)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ggplot2.org/&#34;&gt;ggplot2 documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Grammar of Graphics (ggplot2) [Part 1]</title>
      <link>/2017/03/02/grammar-of-graphics-ggplot2/</link>
      <pubDate>Thu, 02 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/03/02/grammar-of-graphics-ggplot2/</guid>
      <description>&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#mpg-dataset&#34;&gt;mpg dataset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#aesthetic-mappings&#34;&gt;aesthetic mappings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#set-vs.map&#34;&gt;set vs. map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#facets&#34;&gt;facets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#geoms&#34;&gt;geoms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#grouping&#34;&gt;grouping&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#diamonds-dataset&#34;&gt;diamonds dataset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#stats&#34;&gt;stats&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#position-adjustment&#34;&gt;position adjustment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#coordinate-systems&#34;&gt;coordinate systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#summary&#34;&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;ggplot2 is a plotting system for R, based on the grammar of graphics, which tries to take the good parts of base and lattice graphics and none of the bad parts.&lt;/p&gt;
&lt;div id=&#34;mpg-dataset&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;mpg dataset&lt;/h2&gt;
&lt;p&gt;Fuel economy data from 1999 and 2008 for 38 popular models of car., see &lt;code&gt;?mpg&lt;/code&gt; for details.&lt;/p&gt;
&lt;p&gt;What is the relationship between an engine size &lt;code&gt;displ&lt;/code&gt; and mileage on highway &lt;code&gt;hwy&lt;/code&gt;?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = mpg) +
  geom_point(aes(x = displ, y = hwy))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/2017-03-02-grammar-of-graphics-ggplot2_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;aesthetic-mappings&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;aesthetic mappings&lt;/h2&gt;
&lt;p&gt;Aesthetic mappings &lt;code&gt;aes&lt;/code&gt; connect data space and visual spaces.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;set-vs.map&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;set vs. map&lt;/h2&gt;
&lt;div id=&#34;challenge-1&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Challenge 1&lt;/h4&gt;
&lt;p&gt;What is a difference between those two graphs? First guess, then try.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Graph 1: color is in aes
ggplot(data = mpg) + 
  geom_point(aes(x = displ, y = hwy, color = &amp;quot;green&amp;quot;))
# Graph 2: color is out of aes
ggplot(data = mpg) + 
  geom_point(aes(x = displ, y = hwy), color = &amp;quot;green&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Why is that?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;facets&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;facets&lt;/h2&gt;
&lt;p&gt;There are two functions for facets: &lt;code&gt;facet_grid&lt;/code&gt; (= 2D grid) and &lt;code&gt;facet_wrap&lt;/code&gt; (= 1D ribbon wrapped into 2D).&lt;/p&gt;
&lt;div id=&#34;challenge-2&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Challenge 2:&lt;/h4&gt;
&lt;p&gt;What will be the arrangement of the following four graphs. First guess, then try.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p &amp;lt;- ggplot(data = mpg) + geom_point(aes(x=displ, y=hwy))
p + facet_grid(. ~ cyl)
p + facet_grid(. ~ cyl)
p + facet_grid(drv ~ cyl)
p + facet_wrap(~ class)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;geoms&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;geoms&lt;/h2&gt;
&lt;p&gt;Download &lt;a href=&#34;https://www.rstudio.com/wp-content/uploads/2016/11/ggplot2-cheatsheet-2.1.pdf&#34;&gt;ggplot2 Cheat Sheet&lt;/a&gt; to see many geoms of ggplot2.&lt;/p&gt;
&lt;div id=&#34;challenge-3&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Challenge 3:&lt;/h4&gt;
&lt;p&gt;There are many ways how to capture dependence between a car type &lt;code&gt;class&lt;/code&gt; and mileage &lt;code&gt;hwy&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = mpg, aes(x = class, y = hwy))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Try to add different geoms from cheat sheet to get different visualization. For example, adding &lt;code&gt;geom_boxplot&lt;/code&gt; will look like&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = mpg, aes(x = class, y = hwy)) +
  geom_boxplot()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/2017-03-02-grammar-of-graphics-ggplot2_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;challenge-4&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Challenge 4:&lt;/h4&gt;
&lt;p&gt;What happens if you try to add multiple geoms? First guess, then try.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point() +
  geom_smooth()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;grouping&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;grouping&lt;/h2&gt;
&lt;p&gt;Automatically draws a geom for each group, for example&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = mpg, aes(x = displ, y = hwy, color = drv)) +
  geom_point() +
  geom_smooth(se = FALSE) # se = std. error bars&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using method = &amp;#39;loess&amp;#39; and formula &amp;#39;y ~ x&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/2017-03-02-grammar-of-graphics-ggplot2_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;challenge-5&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Challenge 5:&lt;/h4&gt;
&lt;p&gt;Try to create the following plot.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./post/2017-03-02-grammar-of-graphics-ggplot2_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;diamonds-dataset&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;diamonds dataset&lt;/h2&gt;
&lt;p&gt;A dataset containing the prices and other attributes of almost 54,000 diamonds. Try &lt;code&gt;?diamonds&lt;/code&gt; and &lt;code&gt;?View(diamonds)&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;stats&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;stats&lt;/h2&gt;
&lt;p&gt;Many geoms display not raw data but values derived from the raw data. The process that calculates the values is called &lt;code&gt;stat&lt;/code&gt;.&lt;/p&gt;
&lt;div id=&#34;challenge-6&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Challenge 6:&lt;/h4&gt;
&lt;p&gt;Guess what ggplot2 puts on the y axis? Try and see.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(diamonds, aes(x=cut)) +
  geom_bar()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;position-adjustment&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;position adjustment&lt;/h2&gt;
&lt;div id=&#34;challenge-7&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Challenge 7:&lt;/h4&gt;
&lt;p&gt;What do each of these adjustment do? (run the code and interpret)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p &amp;lt;- ggplot(diamonds, aes(x = cut, fill = clarity))
p + geom_bar(position = &amp;quot;stack&amp;quot;)
p + geom_bar(position = &amp;quot;dodge&amp;quot;)
p + geom_bar(position = &amp;quot;identity&amp;quot;)
p + geom_bar(position = &amp;quot;fill&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another frequent use of position argument is jittering, that is moving each point a bit in a random direction to avoid overplotting.&lt;/p&gt;
&lt;p&gt;Compare the following two plots. The are 236 data points on the second one, but only 126 data points on the first one.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p &amp;lt;- ggplot(mpg, aes(displ, hwy))
p + geom_point() + ggtitle(&amp;quot;No jittering&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/2017-03-02-grammar-of-graphics-ggplot2_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p + geom_point(position = &amp;quot;jitter&amp;quot;) + ggtitle(&amp;quot;Jittered&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/2017-03-02-grammar-of-graphics-ggplot2_files/figure-html/unnamed-chunk-12-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;coordinate-systems&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;coordinate systems&lt;/h2&gt;
&lt;p&gt;A pie chart is just a bar chart in polar coordinates.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(diamonds, aes(x = factor(1), fill = cut)) +
  geom_bar(width = 1) +
  coord_polar(theta=&amp;quot;y&amp;quot;) + 
  theme_void() # to remove grey backgroud&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/2017-03-02-grammar-of-graphics-ggplot2_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;challenge-7-1&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Challenge 7:&lt;/h4&gt;
&lt;p&gt;Read about coordinate systems on ggplot2 cheat sheet. How to you switch x and y axis to get the following graph?&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./post/2017-03-02-grammar-of-graphics-ggplot2_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;summary&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;There is more that one approach to ggplot2. It might be viewed as a magic set of powerful spells that you discover on StackExchange or Kaggle, memorize and later use on your dataset.&lt;/p&gt;
&lt;p&gt;However, if your understand how ggplot2 magic works, you can become much more powerful magician.&lt;/p&gt;
&lt;p&gt;Next time we will learn how to make ggplot2 output not to look like (grey ugly) ggplot2 output but rather something like &lt;a href=&#34;https://www.kaggle.com/juliasilge/d/stackoverflow/stacklite/weekends-and-weekdays&#34;&gt;this&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;sources&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Sources:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Data Visualization with ggplot2 (rstudio::conf, Tidyverse workshop)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ggplot2.org/&#34;&gt;ggplot2 documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>R Base Graphics</title>
      <link>/2017/02/28/r-base-graphics/</link>
      <pubDate>Tue, 28 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/02/28/r-base-graphics/</guid>
      <description>&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#x-y-plotting&#34;&gt;X-Y Plotting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gapminder-dataset&#34;&gt;Gapminder dataset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#histogram&#34;&gt;Histogram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#barplot&#34;&gt;Barplot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#more-than-one-plot-in-a-window&#34;&gt;More than one plot in a window&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#boxplot&#34;&gt;Boxplot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#saving-the-plots&#34;&gt;Saving the plots&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#summary&#34;&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;One of the strengths of R is its ability to produce a wide range of plots. Multiple plotting libraries exist and even the base R graphics is powerful and can be mastered in a few hours.&lt;/p&gt;
&lt;div id=&#34;x-y-plotting&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;X-Y Plotting&lt;/h2&gt;
&lt;p&gt;Basic plot call takes the following form &lt;code&gt;plot(x=, y=)&lt;/code&gt;, for example&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;height &amp;lt;- c(123, 145, 150, 167, 176)
weight &amp;lt;- c(40, 51, 55, 63, 64)

plot(height, weight)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/2017-02-28-r-base-graphics_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;main&lt;/code&gt; to set the title, &lt;code&gt;xlab&lt;/code&gt; and &lt;code&gt;ylab&lt;/code&gt; for x- and y- labels, &lt;code&gt;xlim&lt;/code&gt; and &lt;code&gt;ylim&lt;/code&gt; for x- and y- limits, &lt;code&gt;type&lt;/code&gt; to set a type of the graph (“p”=points, “l”=lines, “b”=both, “n”=none) and &lt;code&gt;col&lt;/code&gt; to choose colors.&lt;/p&gt;
&lt;div id=&#34;challenge-1&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Challenge 1:&lt;/h4&gt;
&lt;p&gt;Modify the code above to get points connected by a line&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./post/2017-02-28-r-base-graphics_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Or to see both points and a line like on the plot below.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./post/2017-02-28-r-base-graphics_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;To the existing plot, you can add lines (&lt;code&gt;lines&lt;/code&gt;, &lt;code&gt;abline&lt;/code&gt;), points (&lt;code&gt;points&lt;/code&gt;), legend (&lt;code&gt;legend&lt;/code&gt;), text (&lt;code&gt;text&lt;/code&gt;) and other objects.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;gapminder-dataset&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Gapminder dataset&lt;/h2&gt;
&lt;p&gt;Gapminder is a an excerpt of the Gapminder data on life expectancy, GDP per capita, and population by country. It is distributed as R package. The following code loads &lt;code&gt;gapminder&lt;/code&gt; (if missing, installs it) and prints the first few lines:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# check if gapminder can be loaded, if not install it
if (!require(&amp;quot;gapminder&amp;quot;)) {
  install.packages(&amp;quot;gapminder&amp;quot;)
  library(&amp;quot;gapminder&amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: gapminder&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data(gapminder)
head(gapminder)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       country continent year lifeExp      pop gdpPercap
## 1 Afghanistan      Asia 1952  28.801  8425333  779.4453
## 2 Afghanistan      Asia 1957  30.332  9240934  820.8530
## 3 Afghanistan      Asia 1962  31.997 10267083  853.1007
## 4 Afghanistan      Asia 1967  34.020 11537966  836.1971
## 5 Afghanistan      Asia 1972  36.088 13079460  739.9811
## 6 Afghanistan      Asia 1977  38.438 14880372  786.1134&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Type &lt;code&gt;?gapminder&lt;/code&gt; into your console to get info about the dataset and try to answer the following questions.&lt;/p&gt;
&lt;div id=&#34;challenge-2&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Challenge 2&lt;/h4&gt;
&lt;p&gt;How many rows and columns are in gapminder? What was the population of Czech Republic in 1952? Which country has the highest GDP per capita in 2007?&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;challenge-3&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Challenge 3&lt;/h4&gt;
&lt;p&gt;For 2007, make a scatter-plot of life expectancy vs. GDP per capita and color each state by its continent.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./post/2017-02-28-r-base-graphics_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now try to style the plot a bit by adding the title, labels and a legend.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./post/2017-02-28-r-base-graphics_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;histogram&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Histogram&lt;/h2&gt;
&lt;p&gt;Histograms are plotted with &lt;code&gt;hist&lt;/code&gt; function (see &lt;code&gt;?hist&lt;/code&gt; for help and examples).&lt;/p&gt;
&lt;div id=&#34;challenge-4&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Challenge 4&lt;/h4&gt;
&lt;p&gt;Plot a histogram of life expectancy in 2007 over all countries: &lt;img src=&#34;./post/2017-02-28-r-base-graphics_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;barplot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Barplot&lt;/h2&gt;
&lt;p&gt;Barplots are plotted with &lt;code&gt;barplot&lt;/code&gt; function.&lt;/p&gt;
&lt;div id=&#34;challenge-5&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Challenge 5&lt;/h4&gt;
&lt;p&gt;Visualize how the population of the Czech Republic grows by a line and a barplot. Which plot do you prefer?&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./post/2017-02-28-r-base-graphics_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;img src=&#34;./post/2017-02-28-r-base-graphics_files/figure-html/unnamed-chunk-9-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;more-than-one-plot-in-a-window&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;More than one plot in a window&lt;/h2&gt;
&lt;p&gt;With a graphical parameter &lt;code&gt;mfrow&lt;/code&gt; we can get two or more plots into one window (or file). For example, see the comparison of the histogram to a density plot below.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;czech &amp;lt;- subset(gapminder, country == &amp;quot;Czech Republic&amp;quot;)

par(mfrow = c(1,2)) # one row, two columns
hist(czech$gdpPercap, main=&amp;quot;Histogram&amp;quot;)
plot(density(czech$gdpPercap), main=&amp;quot;Density&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/2017-02-28-r-base-graphics_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;boxplot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Boxplot&lt;/h2&gt;
&lt;p&gt;Boxplots can be used to compare data from several groups.&lt;/p&gt;
&lt;div id=&#34;challenge-6&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Challenge 6&lt;/h4&gt;
&lt;p&gt;For 2007, compare life expectancy between the continents.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;year2007 &amp;lt;- subset(gapminder, year == 2007)

# las = 2 plots text perpendicularly to axis
boxplot(lifeExp ~ continent, data=year2007, las=2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/2017-02-28-r-base-graphics_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;saving-the-plots&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Saving the plots&lt;/h2&gt;
&lt;p&gt;See the help and examples for &lt;code&gt;pdf&lt;/code&gt;, &lt;code&gt;png&lt;/code&gt;, &lt;code&gt;dev.off&lt;/code&gt; and &lt;code&gt;dev.copy&lt;/code&gt; functions.&lt;/p&gt;
&lt;div id=&#34;challenge-7&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Challenge 7&lt;/h4&gt;
&lt;p&gt;Save the last plot into PDF and PNG files.&lt;/p&gt;
&lt;p&gt;Are the plots same or different? Why?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;summary&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;You can do almost anything with base graphics but some common actions are not straightforward (nice colors, faceting, legends, error bars). Complex graphs can be time consuming and their code hard to read.&lt;/p&gt;
&lt;p&gt;R Base graphics is great for a quick exploratory analysis but for a publication level graphics, I prefer &lt;a href=&#34;http://ggplot2.org/&#34;&gt;ggplot2&lt;/a&gt;. More about it next time.&lt;/p&gt;
&lt;div id=&#34;sources&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Sources:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://rpubs.com/SusanEJohnston/7953&#34; class=&#34;uri&#34;&gt;http://rpubs.com/SusanEJohnston/7953&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.statmethods.net/graphs/scatterplot.html&#34; class=&#34;uri&#34;&gt;http://www.statmethods.net/graphs/scatterplot.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.statmethods.net/advgraphs/parameters.html&#34; class=&#34;uri&#34;&gt;http://www.statmethods.net/advgraphs/parameters.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>/about/</link>
      <pubDate>Thu, 05 May 2016 21:48:51 -0700</pubDate>
      
      <guid>/about/</guid>
      <description>&lt;p&gt;This site is powered by &lt;a href=&#34;https://github.com/rstudio/blogdown&#34;&gt;&lt;strong&gt;blogdown&lt;/strong&gt;&lt;/a&gt; package. The theme was forked from &lt;a href=&#34;https://github.com/jrutheiser/hugo-lithium-theme&#34;&gt;@jrutheiser/hugo-lithium-theme&lt;/a&gt; and modified by &lt;a href=&#34;https://github.com/yihui/hugo-lithium-theme&#34;&gt;Yihui Xie&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>